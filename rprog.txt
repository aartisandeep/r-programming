##write comments describing your functions
## Write a short comment describing this function

makeCacheMatrix <- function(x = matrix()){
## This function creates a special "matrix" object that can cache its inverse
## define the argument with default mode of "matrix"
invse <- NULL
## initialize invse as NULL; will hold value of matrix inverse
set <- function(y) {
## define the set function to assign new
x <<- y
## value of matrix in parent environment
invse <<- NULL
## if there is a new matrix, reset invse to NULL
}

get <- function() x
## define the get fucntion - returns value of the matrix argument
setinverse <- function(inverse) 
invse <<- inverse  
## assigns value of invse in parent environment

getinverse <- function() invse
## gets the value of invse where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)  
## this is needed in order to refer to the functions with the $ operator


## give proper describing functions
## Write a short comment describing this function

## This function computes the inverse of the special "matrix" returned by makeCacheMatrix.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache

cacheSolve <- function(x, ...) {
        
## Return a matrix that is the inverse of 'x'

invse <- x$getinverse()
if(!is.null(invse)) {
message("Getting cached data!")
return(invse)
}
data <- x$get()
invse <- solve(data, ...)
x$setinverse(invse)invse

 }